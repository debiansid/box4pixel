#!/system/bin/sh

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})

source ${scripts_dir}/box.config

mark_id="16777216/16777216"
table_id="2024"

log() {
  export TZ=Asia/Shanghai
  now=$(date +"[%Y-%m-%d %H:%M:%S %Z]")
  case $1 in
    Info) [ -t 1 ] && echo -e "\033[1;32m${now} [Info]: $2\033[0m" || echo "${now} [Info]: $2" ;;
    Warn) [ -t 1 ] && echo -e "\033[1;33m${now} [Warn]: $2\033[0m" || echo "${now} [Warn]: $2" ;;
    Error) [ -t 1 ] && echo -e "\033[1;31m${now} [Error]: $2\033[0m" || echo "${now} [Error]: $2" ;;
    *) [ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2" ;;
  esac
}

uid_list=()
find_packages_uid() {
  for user_package in ${user_packages_list[@]} ; do
    user=$(echo ${user_package} | awk -F ':' '{print $1}')
    package=$(echo ${user_package} | awk -F ':' '{print $2}')
    uid="$(awk '{if($1=="'${package}'"){print $2}}' /data/system/packages.list)"
    if [[ -n "${uid}" ]]; then
      uid_list[${#uid_list[@]}]=$(expr ${user} \* "100000" + ${uid})
    fi
  done
}

probe_user_group() {
  if bin_pid=$(busybox pidof ${bin_name}) ; then
    box_user=$(stat -c %U /proc/${bin_pid})
    box_group=$(stat -c %G /proc/${bin_pid})
    return 0
  else
    box_user=$(echo ${box_user_group} | awk -F ':' '{print $1}')
    box_group=$(echo ${box_user_group} | awk -F ':' '{print $2}')
    return 1
  fi
}

start_tproxy() {
  iptables="iptables -w 100"
  ip rule add fwmark ${mark_id} table ${table_id} pref ${table_id}
  ip route add local default dev lo table ${table_id}

  ${iptables} -t mangle -N BOX_EXTERNAL
  ${iptables} -t mangle -F BOX_EXTERNAL

  for subnet in ${intranet[@]} ; do
    ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} -j RETURN
  done
  ${iptables} -t mangle -N LOCAL_IP_V4
  ${iptables} -t mangle -F LOCAL_IP_V4
  ${iptables} -t mangle -A BOX_EXTERNAL -j LOCAL_IP_V4

  ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}

  if [ "${ap_list}" != "" ] ; then
    for ap in ${ap_list[@]} ; do
      ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
      ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
    done
    log Info "${ap_list[*]} transparent proxy."
  fi

  ${iptables} -t mangle -I PREROUTING -j BOX_EXTERNAL

  ${iptables} -t mangle -N BOX_LOCAL
  ${iptables} -t mangle -F BOX_LOCAL

  ${iptables} -t mangle -A BOX_LOCAL -m owner --uid-owner ${box_user} --gid-owner ${box_group} -j RETURN

  if [ "${ignore_out_list}" != "" ] ; then
    for ignore in ${ignore_out_list[@]} ; do
      ${iptables} -t mangle -A BOX_LOCAL -o ${ignore} -j RETURN
    done
    log Info "${ignore_out_list[*]} ignore transparent proxy."
  fi

  for subnet in ${intranet[@]} ; do
    ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} -j RETURN
  done
  ${iptables} -t mangle -A BOX_LOCAL -j LOCAL_IP_V4

  if [ "${proxy_mode}" = "blacklist" ] ; then
    if [ "${uid_list}" = "" ] ; then
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
      log Info "transparent proxy for all apps."
    else
      for appid in ${uid_list[@]} ; do
        ${iptables} -t mangle -A BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} no transparent proxy."
    fi
    if [ "${gid_list}" != "" ] ; then
      for gid in ${gid_list[@]} ; do
        ${iptables} -t mangle -A BOX_LOCAL -m owner --gid-owner ${gid} -j RETURN
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} no transparent proxy."
    fi
  elif [ "${proxy_mode}" = "whitelist" ] ; then
    if [ "${uid_list}" != "" ] ; then
      for appid in ${uid_list[@]} ; do
        ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-xmark ${mark_id}
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-xmark ${mark_id}
      done
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-xmark ${mark_id}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} transparent proxy."
    fi
    if [ "${gid_list}" != "" ] ; then
      for gid in ${gid_list[@]} ; do
        ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --gid-owner ${gid} -j MARK --set-xmark ${mark_id}
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --gid-owner ${gid} -j MARK --set-xmark ${mark_id}
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} transparent proxy."
    fi
  else
    log Warn "proxy mode: ${proxy_mode} error."
    ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}
    ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
    log Info "transparent proxy for all apps."
  fi

  ${iptables} -t mangle -I OUTPUT -j BOX_LOCAL

  ${iptables} -t mangle -N DIVERT
  ${iptables} -t mangle -F DIVERT
  ${iptables} -t mangle -A DIVERT -j MARK --set-xmark ${mark_id}
  ${iptables} -t mangle -A DIVERT -j ACCEPT
  ${iptables} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT

  ${iptables} -A OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${tproxy_port} -j REJECT
}

stop_tproxy() {
  iptables="iptables -w 100"
  ip rule del fwmark ${mark_id} table ${table_id} pref ${table_id} >> /dev/null 2>&1
  ip route flush table ${table_id} >> /dev/null 2>&1

  ${iptables} -t mangle -D PREROUTING -j BOX_EXTERNAL >> /dev/null 2>&1
  ${iptables} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT >> /dev/null 2>&1
  ${iptables} -t mangle -D OUTPUT -j BOX_LOCAL >> /dev/null 2>&1

  ${iptables} -t mangle -F BOX_EXTERNAL >> /dev/null 2>&1
  ${iptables} -t mangle -X BOX_EXTERNAL >> /dev/null 2>&1
  ${iptables} -t mangle -F BOX_LOCAL >> /dev/null 2>&1
  ${iptables} -t mangle -X BOX_LOCAL >> /dev/null 2>&1
  ${iptables} -t mangle -F LOCAL_IP_V4 >> /dev/null 2>&1
  ${iptables} -t mangle -X LOCAL_IP_V4 >> /dev/null 2>&1
  ${iptables} -t mangle -F DIVERT >> /dev/null 2>&1
  ${iptables} -t mangle -X DIVERT >> /dev/null 2>&1

  ${iptables} -D OUTPUT -d 127.0.0.1 -p tcp -m owner --uid-owner ${box_user} --gid-owner ${box_group} -m tcp --dport ${tproxy_port} -j REJECT >> /dev/null 2>&1
}

case "$1" in
  enable)
    stop_tproxy >> /dev/null 2>&1
    sleep 1
    if ! probe_user_group ; then
      log Error "failed to check Box user group, please make sure ${bin_name} core is started."
      return 1
    fi
    find_packages_uid
    intranet[${#intranet[@]}]=$(ip -4 a | awk '/inet/ {print $2}' | grep -vE "^127.0.0.1")
    if (zcat /proc/config.gz | grep -q TPROXY) ; then
      log Info "use TPROXY:TCP+UDP."
      log Info "creating iptables transparent proxy rules."
      start_tproxy && log Info "create iptables transparent proxy rules done." || (log Error "create iptables transparent proxy rules failed." && stop_tproxy >> /dev/null 2>&1)
    else
      log Error "the device does not support TPROXY, please ensure kernel compatibility."
      return 1
    fi
    ;;
  disable)
    log Warn "cleaning up iptables transparent proxy rules."
    probe_user_group
    stop_tproxy >> /dev/null 2>&1
    log Warn "clean up iptables transparent proxy rules done."
    return 0
    ;;
  renew)
    log Warn "cleaning up iptables transparent proxy rules."
    stop_tproxy >> /dev/null 2>&1
    log Warn "clean up iptables transparent proxy rules done."
    sleep 3
    if ! probe_user_group ; then
      log Error "failed to check Box user group, please make sure ${bin_name} core is started."
      return 1
    fi
    find_packages_uid
    intranet[${#intranet[@]}]=$(ip -4 a | awk '/inet/ {print $2}' | grep -vE "^127.0.0.1")
    if (zcat /proc/config.gz | grep -q TPROXY) ; then
      log Info "use TPROXY:TCP+UDP."
      log Info "creating iptables transparent proxy rules."
      start_tproxy && log Info "create iptables transparent proxy rules done." || (log Error "create iptables transparent proxy rules failed." && stop_tproxy >> /dev/null 2>&1)
    else
      log Error "the device does not support TPROXY, please ensure kernel compatibility."
      return 1
    fi
    ;;
  *)
    log Error "$0 $1 usage: $0 {enable|disable|renew}"
    ;;
esac

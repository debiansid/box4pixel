#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})

source ${scripts_dir}/box.config

mkdir -p ${run_path}
mkdir -p ${box_path}/${bin_name}

find ${box_path} -mtime +3 -type f -name "*.log" | xargs rm -f

check_permission() {
  if which ${bin_name} | grep -q "/system/bin/" ; then
    box_user=$(echo ${box_user_group} | awk -F ':' '{print $1}')
    box_group=$(echo ${box_user_group} | awk -F ':' '{print $2}')
    box_user_id=$(id -u ${box_user})
    box_group_id=$(id -g ${box_group})
    [ ${box_user_id} ] && [ ${box_group_id} ] || \
    (box_user_group="root:net_admin" && log Error "${box_user_group} error, use root:net_admin instead.")
    bin_path=$(which ${bin_name})
    chown ${box_user_group} ${bin_path}
    chmod 0755 ${bin_path}
    if [ "${box_user_id}" != "0" ] || [ "${box_group_id}" != "3005" ] ; then
      setcap 'cap_net_admin,cap_net_raw,cap_net_bind_service,cap_sys_ptrace,cap_dac_read_search+ep' ${bin_path} || \
      (box_user_group="root:net_admin" && log Error "setcap authorization failed, you may need libcap package.")
    fi
    chown -R ${box_user_group} ${box_path}
    return 0
  elif [ -f ${bin_path} ] ; then
    box_user_group="root:net_admin"
    chown ${box_user_group} ${bin_path}
    chmod 0700 ${bin_path}
    chown -R ${box_user_group} ${box_path}
    return 0
  else
    return 1
  fi
}

start_bin() {
  ulimit -SHn 1000000
  if ${bin_path} check -D ${box_path}/${bin_name} > ${run_path}/check.log 2>&1 ; then
    log Info "starting ${bin_name} service."
    nohup busybox setuidgid ${box_user_group} ${bin_path} run -D ${box_path}/${bin_name} > /dev/null 2> ${run_path}/error_${bin_name}.log &
    echo -n $! > ${pid_file}
    return 0
  else
    log Error "configuration check failed, please check the ${run_path}/check.log file."
    return 1
  fi
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

wait_bin_listen() {
  wait_count=0
  bin_pid=$(busybox pidof ${bin_name})
  find_netstat_path && \
  check_bin_cmd="netstat -tnulp | grep -q ${bin_name}" || \
  check_bin_cmd="ls -lh /proc/${bin_pid}/fd | grep -q socket"
  while [ ${bin_pid} ] && ! eval "${check_bin_cmd}" && [ ${wait_count} -lt 100 ] ; do
    sleep 1 ; wait_count=$((${wait_count} + 1))
  done
  if [ ${bin_pid} ] && eval "${check_bin_cmd}" ; then
    return 0
  else
    return 1
  fi
}

display_bin_status() {
  if bin_pid=$(busybox pidof ${bin_name}) ; then
    log Info "${bin_name} has started with the $(stat -c %U:%G /proc/${bin_pid}) user group."
    log Info "${bin_name} service is running. ( PID: ${bin_pid} )"
    log Info "${bin_name} memory usage: $(cat /proc/${bin_pid}/status | grep -w VmRSS | awk '{print $2$3}')"
    log Info "${bin_name} cpu usage: $((/system/bin/ps -eo %CPU,NAME | grep ${bin_name} | awk '{print $1"%"}') 2> /dev/null || dumpsys cpuinfo | grep ${bin_name} | awk '{print $1}')"
    log Info "${bin_name} running time: $(busybox ps -o comm,etime | grep ${bin_name} | awk '{print $2}')"
    echo -n ${bin_pid} > ${pid_file}
    return 0
  else
    log Warn "${bin_name} service is stopped."
    return 1
  fi
}

start_service() {
  if check_permission ; then
    log Info "${bin_name} will be started with the ${box_user_group} user group."
    if start_bin && wait_bin_listen ; then
      log Info "${bin_name} service is running. ( PID: $(cat ${pid_file}) )"
      if ${scripts_dir}/box.tproxy enable ; then
        log Info "Transparent proxy rules enabled successfully."
      else
        log Error "Failed to enable transparent proxy rules. Check ${run_path}/error_${bin_name}.log for details."
        stop_service
        return 1
      fi
      return 0
    else
      if bin_pid=$(pidof ${bin_name}) ; then
        log Warn "${bin_name} service is running but may not be listening. ( PID: ${bin_pid} )"
        if ${scripts_dir}/box.tproxy enable ; then
          log Info "Transparent proxy rules enabled successfully."
        else
          log Error "Failed to enable transparent proxy rules. Check ${run_path}/error_${bin_name}.log for details."
          stop_service
          return 1
        fi
        return 0
      else
        log Error "Start ${bin_name} service failed, please check the ${run_path}/error_${bin_name}.log file."
        rm -f ${pid_file} >> /dev/null 2>&1
        return 1
      fi
    fi
  else
    log Error "Missing ${bin_name} core, please download and place it in the ${box_path}/bin/ directory"
    return 2
  fi
}

stop_service() {
  if [ -f ${scripts_dir}/box.tproxy ]; then
    ${scripts_dir}/box.tproxy disable
    log Info "Transparent proxy rules disabled."
  else
    log Warn "box.tproxy script not found, skipping transparent proxy cleanup."
  fi
  if display_bin_status ; then
    log Warn "Stopping ${bin_name} service."
    kill $(cat ${pid_file}) || killall ${bin_name}
    sleep 1
    display_bin_status
  fi
  rm -f ${pid_file} >> /dev/null 2>&1
}

case "$1" in
  start) display_bin_status || start_service ;;
  stop) stop_service ;;
  restart) 
    stop_service
    sleep 2
    start_service
    ;;
  status) display_bin_status ;;
  *) log Error "$0 $1 usage: $0 {start|stop|restart|status}" ;;
esac

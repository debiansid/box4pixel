#!/system/bin/sh

# Service management script for sing-box proxy on rooted Android devices.

export PATH="/data/adb/magisk:/data/adb/ksu/bin:/data/adb/ap/bin:$PATH:/data/data/com.termux/files/usr/bin"

version="1.0"

# Help function for usage.
help() {
  echo "Usage: $0 {start|stop|restart|status} [--help]"
  echo "Version: ${version}"
  echo "  start: Start the sing-box service."
  echo "  stop: Stop the sing-box service."
  echo "  restart: Restart the sing-box service."
  echo "  status: Check the sing-box service status."
  echo "  --help: Show this help message."
}

if [ "$1" = "--help" ]; then
  help
  exit 0
fi

scripts=$(realpath "$0")
scripts_dir=$(dirname "${scripts}")

source "${scripts_dir}/box.config"

# Check for required tools.
for tool in busybox id stat netstat; do
  if ! command -v "${tool}" >/dev/null; then
    echo "Error: Missing required tool: ${tool}. Install or adjust PATH." >&2
    exit 1
  fi
done

mkdir -p "${run_path}"
mkdir -p "${box_path}/${bin_name}"

find "${box_path}" -mtime +3 -type f -name "*.log" -exec rm -f {} \;

log() {
  export TZ=Asia/Shanghai
  now=$(date +"[%Y-%m-%d %H:%M:%S %Z]")
  case $1 in
    Info)
      [ -t 1 ] && echo -e "\033[1;32m${now} [Info]: $2\033[0m" || echo "${now} [Info]: $2"
      ;;
    Warn)
      [ -t 1 ] && echo -e "\033[1;33m${now} [Warn]: $2\033[0m" || echo "${now} [Warn]: $2"
      ;;
    Error)
      [ -t 1 ] && echo -e "\033[1;31m${now} [Error]: $2\033[0m" || echo "${now} [Error]: $2"
      ;;
    *)
      [ -t 1 ] && echo -e "\033[1;30m${now} [$1]: $2\033[0m" || echo "${now} [$1]: $2"
      ;;
  esac
  echo "${now} [$1]: $2" >> "${run_path}/box.log"
}

check_permission() {
  if which "${bin_name}" | grep -q "/system/bin/" ; then
    box_user=$(echo "${box_user_group}" | awk -F ':' '{print $1}')
    box_group=$(echo "${box_user_group}" | awk -F ':' '{print $2}')
    box_user_id=$(id -u "${box_user}")
    box_group_id=$(id -g "${box_group}")
    [ -n "${box_user_id}" ] && [ -n "${box_group_id}" ] || \
    (box_user_group="root:net_admin" && log Error "${box_user_group} error, use root:net_admin instead.")
    bin_path=$(which "${bin_name}")
    chown "${box_user_group}" "${bin_path}"
    chmod 0755 "${bin_path}"
    if [ "${box_user_id}" != "0" ] || [ "${box_group_id}" != "3005" ] ; then
      # setcap has been deprecated as it does not support binary outside of the /system/bin directory
      setcap 'cap_net_admin,cap_net_raw,cap_net_bind_service,cap_sys_ptrace,cap_dac_read_search+ep' "${bin_path}" || \
      (box_user_group="root:net_admin" && log Error "setcap authorization failed, you may need libcap package.")
    fi
    chown -R "${box_user_group}" "${box_path}"
    chmod -R 750 "${box_path}"
    return 0
  elif [ -f "${bin_path}" ] ; then
    box_user_group="root:net_admin"
    chown "${box_user_group}" "${bin_path}"
    chmod 0700 "${bin_path}"
    chown -R "${box_user_group}" "${box_path}"
    chmod -R 750 "${box_path}"
    return 0
  else
    return 1
  fi
}

start_bin() {
  ulimit -SHn 1000000
  if "${bin_path}" check -D "${box_path}/${bin_name}" > "${run_path}/check.log" 2>&1 ; then
    log Info "starting sing-box service."
    nohup busybox setuidgid "${box_user_group}" "${bin_path}" run -D "${box_path}/${bin_name}" >> "${run_path}/output_${bin_name}.log" 2> "${run_path}/error_${bin_name}.log" &
    echo -n $! > "${pid_file}"
    return 0
  else
    log Error "configuration check failed, please check the ${run_path}/check.log file."
    return 1
  fi
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

wait_bin_listen() {
  wait_count=0
  bin_pid=$(busybox pidof "${bin_name}")
  find_netstat_path && \
  check_bin_cmd="netstat -tnulp | grep -q ${bin_name}" || \
  check_bin_cmd="ls -lh /proc/${bin_pid}/fd | grep -q socket"
  while [ -n "${bin_pid}" ] && ! eval "${check_bin_cmd}" && [ "${wait_count}" -lt "${wait_timeout}" ] ; do
    sleep 1 ; wait_count=$((wait_count + 1))
  done
  if [ -n "${bin_pid}" ] && eval "${check_bin_cmd}" ; then
    return 0
  else
    return 1
  fi
}

display_bin_status() {
  if [ -f "${pid_file}" ] && bin_pid=$(cat "${pid_file}"); then
    if ! kill -0 "${bin_pid}" 2>/dev/null; then
      log Warn "Stale PID file detected. Process ${bin_pid} is not running."
      rm -f "${pid_file}"
      bin_pid=""
    fi
  else
    bin_pid=$(busybox pidof "${bin_name}")
  fi

  if [ -n "${bin_pid}" ] ; then
    log Info "${bin_name} has started with the $(stat -c %U:%G /proc/${bin_pid}) user group."
    log Info "${bin_name} service is running. ( PID: ${bin_pid} )"
    log Info "${bin_name} memory usage: $(cat /proc/${bin_pid}/status | grep -w VmRSS | awk '{print $2$3}')"
    log Info "${bin_name} cpu usage: $( (/system/bin/ps -eo %CPU,NAME | grep "${bin_name}" | awk '{print $1"%"}') 2>/dev/null || dumpsys cpuinfo | grep "${bin_name}" | awk '{print $1}')"
    log Info "${bin_name} running time: $(busybox ps -o comm,etime | grep "${bin_name}" | awk '{print $2}')"
    log Info "${bin_name} version: $(${bin_path} version | grep -oP 'sing-box version \K.*' || echo "unknown")"
    echo -n "${bin_pid}" > "${pid_file}"
    return 0
  else
    log Warn "${bin_name} service is stopped."
    return 1
  fi
}

start_service() {
  if check_permission ; then
    log Info "${bin_name} will be started with the ${box_user_group} user group."
    if start_bin && wait_bin_listen ; then
      log Info "${bin_name} service is running. ( PID: $(cat "${pid_file}") )"
      return 0
    else
      if bin_pid=$(pidof "${bin_name}") ; then
        log Warn "${bin_name} service is running but may not listening. ( PID: ${bin_pid} )"
        return 0
      else
        log Error "start ${bin_name} service failed, please check the ${run_path}/error_${bin_name}.log file."
        rm -f "${pid_file}" >/dev/null 2>&1
        return 1
      fi
    fi
  else
    log Error "missing ${bin_name} core, please download and place it in the ${box_path}/bin/ directory"
    return 2
  fi
}

stop_service() {
  if display_bin_status ; then
    log Warn "stopping ${bin_name} service."
    kill $(cat "${pid_file}") || killall "${bin_name}"
    sleep 1
    display_bin_status
  fi
  rm -f "${pid_file}" >/dev/null 2>&1
}

case "$1" in
  start)
    display_bin_status || start_service
    ;;
  stop)
    stop_service
    ;;
  restart)
    stop_service
    sleep 2
    start_service
    ;;
  status)
    display_bin_status
    ;;
  *)
    log Error "$0 $1 usage: $0 {start|stop|restart|status|--help}"
    exit 1
    ;;
esac
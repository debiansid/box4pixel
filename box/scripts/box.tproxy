#!/system/bin/sh

scripts_dir="/data/adb/box/scripts"

if [ ! -f "${scripts_dir}/box.config" ]; then
  echo "Error: box.config not found in ${scripts_dir}"
  exit 1
fi

source ${scripts_dir}/box.config

mark_id="16777216/16777216"
table_id="2024"

uid_list=()
find_packages_uid() {
  for user_package in ${user_packages_list[@]}; do
    user=$(echo ${user_package} | awk -F ':' '{print $1}')
    package=$(echo ${user_package} | awk -F ':' '{print $2}')
    if [[ ! "${user}" =~ ^[0-9]+$ ]] || [[ -z "${package}" ]]; then
      log Warn "Invalid user_package format: ${user_package}"
      continue
    fi
    uid=$(awk '{if($1=="'${package}'"){print $2}}' /data/system/packages.list)
    if [ -n "${uid}" ]; then
      uid_list[${#uid_list[@]}]=$(expr ${user} \* 100000 + ${uid})
    else
      log Warn "Package ${package} not found in /data/system/packages.list"
    fi
  done
}

create_tun_link() {
  mkdir -p /dev/net
  [ ! -L /dev/net/tun ] && ln -s /dev/tun /dev/net/tun
}

probe_tun_device() {
  ifconfig | grep -q ${tun_device} || return 1
}

forward() {
  ${iptables} -w 100 $1 FORWARD -p udp -o ${tun_device} -j ACCEPT
  ${iptables} -w 100 $1 FORWARD -p udp -i ${tun_device} -j ACCEPT
}

start_enhance() {
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ip -6 rule add fwmark ${mark_id} table ${table_id} pref ${table_id} 2>/dev/null || log Warn "Failed to add IPv6 rule, continuing..."
    ip -6 route add local ::/0 dev lo table ${table_id} 2>/dev/null || log Warn "Failed to add IPv6 route, continuing..."
  else
    ip rule add fwmark ${mark_id} table ${table_id} pref ${table_id} || { log Error "Failed to add IPv4 rule"; return 1; }
    ip route add local default dev lo table ${table_id} || { log Error "Failed to add IPv4 route"; return 1; }
  fi
  ${iptables} -t nat -N BOX_EXTERNAL 2>/dev/null || ${iptables} -t nat -F BOX_EXTERNAL
  ${iptables} -t nat -N BOX_LOCAL 2>/dev/null || ${iptables} -t nat -F BOX_LOCAL
  ${iptables} -t nat -A BOX_EXTERNAL -d 127.0.0.1 -j RETURN
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    for subnet in ${intranet6[@]}; do
      ${iptables} -t nat -A BOX_EXTERNAL -d ${subnet} -j RETURN
      ${iptables} -t nat -A BOX_LOCAL -d ${subnet} -j RETURN
    done
  else
    for subnet in ${intranet[@]}; do
      ${iptables} -t nat -A BOX_EXTERNAL -d ${subnet} -j RETURN
      ${iptables} -t nat -A BOX_LOCAL -d ${subnet} -j RETURN
    done
  fi
  ${iptables} -t nat -A BOX_EXTERNAL -p tcp -i lo -j REDIRECT --to-ports ${redir_port}
  if [ "${ap_list}" != "" ]; then
    for ap in ${ap_list[@]}; do
      ${iptables} -t nat -A BOX_EXTERNAL -p tcp -i ${ap} -j REDIRECT --to-ports ${redir_port}
    done
    log Info "${ap_list[*]} TCP redirected to port ${redir_port}."
  fi
  ${iptables} -t nat -I PREROUTING -j BOX_EXTERNAL
  ${iptables} -t nat -A BOX_LOCAL -d 127.0.0.1 -j RETURN
  ${iptables} -t nat -A BOX_LOCAL -m owner --gid-owner 23333 -j RETURN
  if [ "${ignore_out_list}" != "" ]; then
    for ignore in ${ignore_out_list[@]}; do
      ${iptables} -t nat -A BOX_LOCAL -o ${ignore} -j RETURN
    done
    log Info "${ignore_out_list[*]} ignored for TCP redirect."
  fi
  if [ "${proxy_mode}" = "blacklist" ]; then
    if [ "${uid_list}" = "" ]; then
      ${iptables} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
      log Info "TCP redirected to port ${redir_port} for all apps."
    else
      for appid in ${uid_list[@]}; do
        ${iptables} -t nat -A BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      ${iptables} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} bypassed for TCP redirect."
    fi
    if [ "${gid_list}" != "" ]; then
      for gid in ${gid_list[@]}; do
        ${iptables} -t nat -A BOX_LOCAL -m owner --gid-owner ${gid} -j RETURN
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} bypassed for TCP redirect."
    fi
  elif [ "${proxy_mode}" = "whitelist" ]; then
    if [ "${uid_list}" != "" ]; then
      for appid in ${uid_list[@]}; do
        ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j REDIRECT --to-ports ${redir_port}
      done
      ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j REDIRECT --to-ports ${redir_port}
      ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j REDIRECT --to-ports ${redir_port}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} TCP redirected to port ${redir_port}."
    fi
    if [ "${gid_list}" != "" ]; then
      for gid in ${gid_list[@]}; do
        ${iptables} -t nat -A BOX_LOCAL -p tcp -m owner --gid-owner ${gid} -j REDIRECT --to-ports ${redir_port}
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} TCP redirected to port ${redir_port}."
    fi
  else
    log Warn "proxy mode: ${proxy_mode} error, defaulting to blacklist."
    ${iptables} -t nat -A BOX_LOCAL -p tcp -j REDIRECT --to-ports ${redir_port}
    log Info "TCP redirected to port ${redir_port} for all apps."
  fi
  ${iptables} -t nat -I OUTPUT -j BOX_LOCAL
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ${iptables} -t nat -A OUTPUT -d ::1 -p tcp -m owner --gid-owner 23333 --dport ${redir_port} -j REJECT
  else
    ${iptables} -t nat -A OUTPUT -d 127.0.0.1 -p tcp -m owner --gid-owner 23333 --dport ${redir_port} -j REJECT
  fi
  ${iptables} -t mangle -N BOX_EXTERNAL 2>/dev/null || ${iptables} -t mangle -F BOX_EXTERNAL
  ${iptables} -t mangle -N BOX_LOCAL 2>/dev/null || ${iptables} -t mangle -F BOX_LOCAL
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    for subnet in ${intranet6[@]}; do
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} -j RETURN
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} -j RETURN
    done
  else
    for subnet in ${intranet[@]}; do
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} -j RETURN
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} -j RETURN
    done
  fi
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
  ${iptables} -t mangle -I PREROUTING -j BOX_EXTERNAL
  ${iptables} -t mangle -A BOX_LOCAL -m owner --gid-owner 23333 -j RETURN
  if [ "${ignore_out_list}" != "" ]; then
    for ignore in ${ignore_out_list[@]}; do
      ${iptables} -t mangle -A BOX_LOCAL -o ${ignore} -j RETURN
    done
    log Info "${ignore_out_list[*]} ignored for UDP TPROXY."
  fi
  if [ "${proxy_mode}" = "blacklist" ]; then
    if [ "${uid_list}" = "" ]; then
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
      log Info "UDP TPROXY to port ${tproxy_port} for all apps."
    else
      for appid in ${uid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} bypassed for UDP TPROXY."
    fi
    if [ "${gid_list}" != "" ]; then
      for gid in ${gid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -m owner --gid-owner ${gid} -j RETURN
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} bypassed for UDP TPROXY."
    fi
  elif [ "${proxy_mode}" = "whitelist" ]; then
    if [ "${uid_list}" != "" ]; then
      for appid in ${uid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-xmark ${mark_id}
      done
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-xmark ${mark_id}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} UDP TPROXY to port ${tproxy_port}."
    fi
    if [ "${gid_list}" != "" ]; then
      for gid in ${gid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --gid-owner ${gid} -j MARK --set-xmark ${mark_id}
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} UDP TPROXY to port ${tproxy_port}."
    fi
  else
    log Warn "proxy mode: ${proxy_mode} error, defaulting to blacklist."
    ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
    log Info "UDP TPROXY to port ${tproxy_port} for all apps."
  fi
  ${iptables} -t mangle -I OUTPUT -j BOX_LOCAL
  ${iptables} -t mangle -N DIVERT 2>/dev/null || ${iptables} -t mangle -F DIVERT
  ${iptables} -t mangle -A DIVERT -j MARK --set-xmark ${mark_id}
  ${iptables} -t mangle -A DIVERT -j ACCEPT
  ${iptables} -t mangle -I PREROUTING -p tcp -m socket -j DIVERT
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ${iptables} -t mangle -A OUTPUT -d ::1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT
  else
    ${iptables} -t mangle -A OUTPUT -d 127.0.0.1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT
  fi
}

stop_enhance() {
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ip -6 rule del fwmark ${mark_id} table ${table_id} pref ${table_id} 2>/dev/null
    ip -6 route flush table ${table_id} 2>/dev/null
  else
    ip rule del fwmark ${mark_id} table ${table_id} pref ${table_id} 2>/dev/null
    ip route flush table ${table_id} 2>/dev/null
  fi
  ${iptables} -t nat -D PREROUTING -j BOX_EXTERNAL 2>/dev/null
  ${iptables} -t nat -D OUTPUT -j BOX_LOCAL 2>/dev/null
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ${iptables} -t nat -D OUTPUT -d ::1 -p tcp -m owner --gid-owner 23333 --dport ${redir_port} -j REJECT 2>/dev/null
  else
    ${iptables} -t nat -D OUTPUT -d 127.0.0.1 -p tcp -m owner --gid-owner 23333 --dport ${redir_port} -j REJECT 2>/dev/null
  fi
  ${iptables} -t nat -F BOX_EXTERNAL 2>/dev/null
  ${iptables} -t nat -X BOX_EXTERNAL 2>/dev/null
  ${iptables} -t nat -F BOX_LOCAL 2>/dev/null
  ${iptables} -t nat -X BOX_LOCAL 2>/dev/null
  ${iptables} -t mangle -D PREROUTING -j BOX_EXTERNAL 2>/dev/null
  ${iptables} -t mangle -D PREROUTING -p tcp -m socket -j DIVERT 2>/dev/null
  ${iptables} -t mangle -D OUTPUT -j BOX_LOCAL 2>/dev/null
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ${iptables} -t mangle -D OUTPUT -d ::1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT 2>/dev/null
  else
    ${iptables} -t mangle -D OUTPUT -d 127.0.0.1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT 2>/dev/null
  fi
  ${iptables} -t mangle -F BOX_EXTERNAL 2>/dev/null
  ${iptables} -t mangle -X BOX_EXTERNAL 2>/dev/null
  ${iptables} -t mangle -F BOX_LOCAL 2>/dev/null
  ${iptables} -t mangle -X BOX_LOCAL 2>/dev/null
  ${iptables} -t mangle -F DIVERT 2>/dev/null
  ${iptables} -t mangle -X DIVERT 2>/dev/null
}

start_tproxy() {
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ip -6 rule add fwmark ${mark_id} table ${table_id} pref ${table_id}
    ip -6 route add local ::/0 dev lo table ${table_id}
  else
    ip rule add fwmark ${mark_id} table ${table_id} pref ${table_id}
    ip route add local default dev lo table ${table_id}
  fi
  ${iptables} -t mangle -N BOX_EXTERNAL
  ${iptables} -t mangle -F BOX_EXTERNAL
  ${iptables} -t mangle -N BOX_LOCAL
  ${iptables} -t mangle -F BOX_LOCAL
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    for subnet in ${intranet6[@]}; do
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} ! -p udp -j RETURN
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} ! -p udp -j RETURN
    done
  else
    for subnet in ${intranet[@]}; do
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables} -t mangle -A BOX_EXTERNAL -d ${subnet} ! -p udp -j RETURN
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} -p udp ! --dport 53 -j RETURN
      ${iptables} -t mangle -A BOX_LOCAL -d ${subnet} ! -p udp -j RETURN
    done
  fi
  ${iptables} -t mangle -A BOX_EXTERNAL -p tcp --dport 53 -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp --dport 53 -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
  ${iptables} -t mangle -A BOX_LOCAL -p tcp --dport 53 -j MARK --set-xmark ${mark_id}
  ${iptables} -t mangle -A BOX_LOCAL -p udp --dport 53 -j MARK --set-xmark ${mark_id}
  ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -m socket --transparent -j MARK --set-xmark ${mark_id}
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp -m socket --transparent -j MARK --set-xmark ${mark_id}
  ${iptables} -t mangle -A BOX_EXTERNAL -m socket -j RETURN
  ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
  ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i lo -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
  if [ "${ap_list}" != "" ]; then
    for ap in ${ap_list[@]}; do
      ${iptables} -t mangle -A BOX_EXTERNAL -p tcp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
      ${iptables} -t mangle -A BOX_EXTERNAL -p udp -i ${ap} -j TPROXY --on-port ${tproxy_port} --tproxy-mark ${mark_id}
    done
    log Info "${ap_list[*]} transparent proxy."
  fi
  ${iptables} -t mangle -I PREROUTING -j BOX_EXTERNAL
  ${iptables} -t mangle -A BOX_LOCAL -m owner --gid-owner 23333 -j RETURN
  if [ "${ignore_out_list}" != "" ]; then
    for ignore in ${ignore_out_list[@]}; do
      ${iptables} -t mangle -A BOX_LOCAL -o ${ignore} -j RETURN
    done
    log Info "${ignore_out_list[*]} ignore transparent proxy."
  fi
  if [ "${proxy_mode}" = "blacklist" ]; then
    if [ "${uid_list}" = "" ]; then
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
      log Info "transparent proxy for all apps."
    else
      for appid in ${uid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -m owner --uid-owner ${appid} -j RETURN
      done
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} no transparent proxy."
    fi
    if [ "${gid_list}" != "" ]; then
      for gid in ${gid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -m owner --gid-owner ${gid} -j RETURN
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} no transparent proxy."
    fi
  elif [ "${proxy_mode}" = "whitelist" ]; then
    if [ "${uid_list}" != "" ]; then
      for appid in ${uid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner ${appid} -j MARK --set-xmark ${mark_id}
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner ${appid} -j MARK --set-xmark ${mark_id}
      done
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 0 -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 0 -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --uid-owner 1052 -j MARK --set-xmark ${mark_id}
      ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --uid-owner 1052 -j MARK --set-xmark ${mark_id}
      log Info "proxy mode: ${proxy_mode}, ${user_packages_list[*]} transparent proxy."
    fi
    if [ "${gid_list}" != "" ]; then
      for gid in ${gid_list[@]}; do
        ${iptables} -t mangle -A BOX_LOCAL -p tcp -m owner --gid-owner ${gid} -j MARK --set-xmark ${mark_id}
        ${iptables} -t mangle -A BOX_LOCAL -p udp -m owner --gid-owner ${gid} -j MARK --set-xmark ${mark_id}
      done
      log Info "proxy mode: ${proxy_mode}, GID ${gid_list[*]} transparent proxy."
    fi
  else
    log Warn "proxy mode: ${proxy_mode} error, defaulting to blacklist."
    ${iptables} -t mangle -A BOX_LOCAL -p tcp -j MARK --set-xmark ${mark_id}
    ${iptables} -t mangle -A BOX_LOCAL -p udp -j MARK --set-xmark ${mark_id}
    log Info "transparent proxy for all apps."
  fi
  ${iptables} -t mangle -I OUTPUT -j BOX_LOCAL
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ${iptables} -t mangle -A OUTPUT -d ::1 -p tcp -m owner --gid-owner 23333 --dport ${tproxy_port} -j REJECT
    ${iptables} -t mangle -A OUTPUT -d ::1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT
  else
    ${iptables} -t mangle -A OUTPUT -d 127.0.0.1 -p tcp -m owner --gid-owner 23333 --dport ${tproxy_port} -j REJECT
    ${iptables} -t mangle -A OUTPUT -d 127.0.0.1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT
  fi
}

stop_tproxy() {
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ip -6 rule del fwmark ${mark_id} table ${table_id} pref ${table_id} 2>/dev/null
    ip -6 route flush table ${table_id} 2>/dev/null
  else
    ip rule del fwmark ${mark_id} table ${table_id} pref ${table_id} 2>/dev/null
    ip route flush table ${table_id} 2>/dev/null
  fi
  ${iptables} -t mangle -D PREROUTING -j BOX_EXTERNAL 2>/dev/null
  ${iptables} -t mangle -D OUTPUT -j BOX_LOCAL 2>/dev/null
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ${iptables} -t mangle -D OUTPUT -d ::1 -p tcp -m owner --gid-owner 23333 --dport ${tproxy_port} -j REJECT 2>/dev/null
    ${iptables} -t mangle -D OUTPUT -d ::1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT 2>/dev/null
  else
    ${iptables} -t mangle -D OUTPUT -d 127.0.0.1 -p tcp -m owner --gid-owner 23333 --dport ${tproxy_port} -j REJECT 2>/dev/null
    ${iptables} -t mangle -D OUTPUT -d 127.0.0.1 -p udp -m owner --gid-owner 23333 --dport ${tproxy_port} -j ACCEPT 2>/dev/null
  fi
  ${iptables} -t mangle -F BOX_EXTERNAL 2>/dev/null
  ${iptables} -t mangle -X BOX_EXTERNAL 2>/dev/null
  ${iptables} -t mangle -F BOX_LOCAL 2>/dev/null
  ${iptables} -t mangle -X BOX_LOCAL 2>/dev/null
}

start_tun() {
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ip -6 rule add fwmark ${mark_id} table ${table_id} pref ${table_id}
    ip -6 route add local ::/0 dev lo table ${table_id}
  else
    ip rule add fwmark ${mark_id} table ${table_id} pref ${table_id}
    ip route add local default dev lo table ${table_id}
  fi
  create_tun_link
  if ! probe_tun_device; then
    log Error "TUN device ${tun_device} not found"
    return 1
  fi
  forward -I
}

stop_tun() {
  forward -D 2>/dev/null
  if [ "${iptables}" = "ip6tables -w 100" ]; then
    ip -6 rule del fwmark ${mark_id} table ${table_id} pref ${table_id} 2>/dev/null
    ip -6 route flush table ${table_id} 2>/dev/null
  else
    ip rule del fwmark ${mark_id} table ${table_id} pref ${table_id} 2>/dev/null
    ip route flush table ${table_id} 2>/dev/null
  fi
}

case "$1" in
  enable)
    find_packages_uid
    case "${proxy_method}" in
      tproxy)
        iptables="iptables -w 100"
        start_tproxy && log Info "Created iptables transparent proxy rules." || { log Error "Failed to create iptables transparent proxy rules."; stop_tproxy; return 1; }
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          start_tproxy && log Info "Created ip6tables transparent proxy rules." || { log Error "Failed to create ip6tables transparent proxy rules."; stop_tproxy; return 1; }
        fi
        ;;
      tun)
        iptables="iptables -w 100"
        start_tun && log Info "Created iptables TUN rules." || { log Error "Failed to create iptables TUN rules."; stop_tun; return 1; }
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          start_tun && log Info "Created ip6tables TUN rules." || { log Error "Failed to create ip6tables TUN rules."; stop_tun; return 1; }
        fi
        ;;
      enhance)
        iptables="iptables -w 100"
        start_enhance && log Info "Created iptables enhance rules (TCP to ${redir_port}, UDP to ${tproxy_port})." || { log Error "Failed to create iptables enhance rules."; stop_enhance; return 1; }
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          start_enhance && log Info "Created ip6tables enhance rules (TCP to ${redir_port}, UDP to ${tproxy_port})." || { log Error "Failed to create ip6tables enhance rules."; stop_enhance; return 1; }
        fi
        ;;
      *)
        log Error "Invalid proxy method: ${proxy_method}. Supported methods: tproxy, tun, enhance."
        return 1
        ;;
    esac
    ;;
  disable)
    case "${proxy_method}" in
      tproxy)
        iptables="iptables -w 100"
        stop_tproxy
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          stop_tproxy
        fi
        ;;
      tun)
        iptables="iptables -w 100"
        stop_tun
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          stop_tun
        fi
        ;;
      enhance)
        iptables="iptables -w 100"
        stop_enhance
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          stop_enhance
        fi
        ;;
      *)
        log Error "Invalid proxy method: ${proxy_method}. Supported methods: tproxy, tun, enhance."
        return 1
        ;;
    esac
    log Info "Transparent proxy rules disabled."
    rm -f ${scripts_dir}/uids.list 2>/dev/null
    ;;
  renew)
    case "${proxy_method}" in
      tproxy)
        iptables="iptables -w 100"
        stop_tproxy
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          stop_tproxy
        fi
        ;;
      tun)
        iptables="iptables -w 100"
        stop_tun
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          stop_tun
        fi
        ;;
      enhance)
        iptables="iptables -w 100"
        stop_enhance
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          stop_enhance
        fi
        ;;
      *)
        log Error "Invalid proxy method: ${proxy_method}. Supported methods: tproxy, tun, enhance."
        return 1
        ;;
    esac
    log Info "Cleaned up transparent proxy rules."
    sleep 1
    find_packages_uid
    case "${proxy_method}" in
      tproxy)
        iptables="iptables -w 100"
        start_tproxy && log Info "Created iptables transparent proxy rules." || { log Error "Failed to create iptables transparent proxy rules."; stop_tproxy; return 1; }
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          start_tproxy && log Info "Created ip6tables transparent proxy rules." || { log Error "Failed to create ip6tables transparent proxy rules."; stop_tproxy; return 1; }
        fi
        ;;
      tun)
        iptables="iptables -w 100"
        start_tun && log Info "Created iptables TUN rules." || { log Error "Failed to create iptables TUN rules."; stop_tun; return 1; }
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          start_tun && log Info "Created ip6tables TUN rules." || { log Error "Failed to create ip6tables TUN rules."; stop_tun; return 1; }
        fi
        ;;
      enhance)
        iptables="iptables -w 100"
        start_enhance && log Info "Created iptables enhance rules (TCP to ${redir_port}, UDP to ${tproxy_port})." || { log Error "Failed to create iptables enhance rules."; stop_enhance; return 1; }
        if [ "${ipv6}" = "enable" ]; then
          iptables="ip6tables -w 100"
          start_enhance && log Info "Created ip6tables enhance rules (TCP to ${redir_port}, UDP to ${tproxy_port})." || { log Error "Failed to create ip6tables enhance rules."; stop_enhance; return 1; }
        fi
        ;;
      *)
        log Error "Invalid proxy method: ${proxy_method}. Supported methods: tproxy, tun, enhance."
        return 1
        ;;
    esac
    ;;
  *)
    log Error "Usage: $0 {enable|disable|renew}"
    exit 1
    ;;
esac

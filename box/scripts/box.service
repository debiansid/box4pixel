#!/system/bin/sh

scripts=$(realpath $0)
scripts_dir=$(dirname ${scripts})

source ${scripts_dir}/box.config

mkdir -p ${run_path}
mkdir -p ${box_path}/${bin_name}

find ${box_path} -mtime +3 -type f -name "*.log" | xargs rm -f

check_permission() {
  if [ -f "${binfile}" ]; then
    chown ${box_user_group} ${binfile}
    chmod 755 ${binfile}
    chown -R ${box_user_group} ${box_path}
    return 0
  else
    return 1
  fi
}

start_bin() {
  ulimit -SHn 1048576
  if ${binfile} check -c ${workfile} -D ${box_path}/${bin_name} > ${run_path}/check.log 2>&1; then
    log Info "Starting ${bin_name} service."
    ${busybox} setuidgid ${box_user_group} nohup ${binfile} run -c ${workfile} -D ${box_path}/${bin_name} > /dev/null 2> ${run_path}/error_${bin_name}.log &
    echo -n $! > ${pid_file}
    return 0
  else
    log Error "Configuration check failed, please check ${run_path}/check.log."
    return 1
  fi
}

find_netstat_path() {
  [ -f /system/bin/netstat ] && alias netstat="/system/bin/netstat" && return 0
  [ -f /system/xbin/netstat ] && alias netstat="/system/xbin/netstat" && return 0
  return 1
}

wait_bin_listen() {
  wait_count=0
  bin_pid=$(${busybox} pidof ${bin_name})
  find_netstat_path && \
  check_bin_cmd="netstat -tnulp | grep -q ${bin_name}" || \
  check_bin_cmd="ls -lh /proc/${bin_pid}/fd | grep -q socket"
  while [ ${bin_pid} ] && ! eval "${check_bin_cmd}" && [ ${wait_count} -lt 100 ]; do
    sleep 1
    wait_count=$((wait_count + 1))
  done
  if [ ${bin_pid} ] && eval "${check_bin_cmd}"; then
    return 0
  else
    return 1
  fi
}

display_bin_status() {
  if bin_pid=$(${busybox} pidof ${bin_name}); then
    log Info "${bin_name} started with user:group $(stat -c %U:%G /proc/${bin_pid})."
    log Info "${bin_name} service running (PID: ${bin_pid})."
    log Info "${bin_name} memory usage: $(cat /proc/${bin_pid}/status | grep -w VmRSS | awk '{print $2$3}')"
    log Info "${bin_name} CPU usage: $((/system/bin/ps -eo %CPU,NAME | grep ${bin_name} | awk '{print $1"%"}') 2> /dev/null || dumpsys cpuinfo | grep ${bin_name} | awk '{print $1}')"
    log Info "${bin_name} running time: $(busybox ps -o comm,etime | grep ${bin_name} | awk '{print $2}')"
    echo -n ${bin_pid} > ${pid_file}
    return 0
  else
    log Warn "${bin_name} service stopped."
    return 1
  fi
}

start_service() {
  if check_permission; then
    log Info "${bin_name} will start with user:group ${box_user_group}."
    if start_bin && wait_bin_listen; then
      log Info "${bin_name} service running (PID: $(cat ${pid_file}))."
      if /data/adb/box/scripts/box.tproxy enable; then
        log Info "Transparent proxy rules enabled."
      else
        log Error "Failed to enable transparent proxy rules. Check ${run_path}/error_${bin_name}.log."
        stop_service
        return 1
      fi
      return 0
    else
      if bin_pid=$(${busybox} pidof ${bin_name}); then
        log Warn "${bin_name} running but not listening (PID: ${bin_pid})."
        if /data/adb/box/scripts/box.tproxy enable; then
          log Info "Transparent proxy rules enabled."
        else
          log Error "Failed to enable transparent proxy rules. Check ${run_path}/error_${bin_name}.log."
          stop_service
          return 1
        fi
        return 0
      else
        log Error "Failed to start ${bin_name} service. Check ${run_path}/error_${bin_name}.log."
        rm -f ${pid_file} 2>/dev/null
        return 1
      fi
    fi
  else
    log Error "Missing ${bin_name} binary at ${binfile}."
    return 1
  fi
}

stop_service() {
  if [ -f /data/adb/box/scripts/box.tproxy ]; then
    /data/adb/box/scripts/box.tproxy disable
    log Info "Transparent proxy rules disabled."
  else
    log Warn "box.tproxy not found, skipping proxy cleanup."
  fi
  if display_bin_status; then
    log Warn "Stopping ${bin_name} service."
    kill $(${busybox} pidof ${bin_name}) 2>/dev/null || killall ${bin_name} 2>/dev/null
    sleep 1
    display_bin_status
  fi
  rm -f ${pid_file} 2>/dev/null
}

case "$1" in
  start) display_bin_status || start_service ;;
  stop) stop_service ;;
  restart) 
    stop_service
    sleep 2
    start_service
    ;;
  status) display_bin_status ;;
  *) log Error "Usage: $0 {start|stop|restart|status}" ;;
esac
